!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t){e.exports=require("react")},function(e,t){e.exports=require("react-router-dom")},function(e,t){e.exports=require("react-bootstrap")},function(e,t){e.exports=require("axios")},function(e,t){e.exports=require("react-dom/server")},function(e,t){e.exports=require("serialize-javascript")},function(e,t){e.exports=require("express")},function(e,t,n){n(8),e.exports=n(10)},function(e,t){e.exports=require("@babel/polyfill")},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r=n(6),o=n.n(r),a=n(0),c=n.n(a),i=n(4),l=n(5),u=n.n(l),s=n(3),p=n.n(s);function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){h(e,t,n[t])})}return e}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var v=c.a.createContext(),E=function(e){function t(e){var n,r,o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,o=d(t).call(this,e),n=!o||"object"!==f(o)&&"function"!=typeof o?g(r):o,h(g(n),"state",{post:n.props.posts.postArray,totalPage:n.props.posts.totalPage,activePage:n.props.posts.activePage,categoryId:n.props.posts.categoryId,categoryPage:!1,isLoading:!1}),h(g(n),"setSinglePost",function(){n.setState({activePage:1,categoryPage:!0})}),h(g(n),"setCategory",function(e){n.setState({isLoading:!0}),p.a.get("https://bhautikng143.000webhostapp.com/wp-json/wp/v2/posts?_embed&categories="+e+"&per_page=10&page=1&order=desc&orderby=date").then(function(t){n.setState({activePage:1,post:t.data,totalPage:t.headers["x-wp-totalpages"],isLoading:!1,categoryId:e})}).catch(function(e){console.log(e)})}),h(g(n),"setActivePage",function(e,t,r,o){var a;n.setState({isLoading:!0}),a="Home"===r?"https://bhautikng143.000webhostapp.com/wp-json/wp/v2/posts/?_embed&per_page=10&page="+e+"&order=desc&orderby=date":"https://bhautikng143.000webhostapp.com/wp-json/wp/v2/posts?_embed&categories="+o+"&per_page=10&page="+e+"&order=desc&orderby=date",p.a.get(a).then(function(r){if("prev"===t&&e>=1&&n.setState({activePage:e,post:r.data,totalPage:r.headers["x-wp-totalpages"],isLoading:!1,categoryId:o}),"next"===t){var a=n.state.totalPage;e<=a&&n.setState({activePage:e,post:r.data,totalPage:r.headers["x-wp-totalpages"],isLoading:!1,categoryId:o})}"normal"===t&&n.setState({activePage:e,post:r.data,totalPage:r.headers["x-wp-totalpages"],isLoading:!1,categoryId:o}),"home"===t&&n.setState({activePage:e,post:r.data,totalPage:r.headers["x-wp-totalpages"],isLoading:!1,categoryId:o})}).catch(function(e){console.log(e)})}),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(t,a["Component"]),n=t,(r=[{key:"render",value:function(){return c.a.createElement(v.Provider,{value:m({},this.state,{setSinglePost:this.setSinglePost,setActivePage:this.setActivePage,setCategory:this.setCategory})},this.props.children)}}])&&y(n.prototype,r),o&&y(n,o),t}(),w=v.Consumer,P=n(1),_=n(2);function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t){return!t||"object"!==j(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function x(e){return(x=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var C=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),S(this,x(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(t,a["Component"]),n=t,(r=[{key:"render",value:function(){var e=this;return c.a.createElement("div",null,c.a.createElement(w,null,function(t){var n,r=t.totalPage,o=t.activePage,a=t.categoryId;n="Home"==e.props.pageName?"/":"/category/"+a+"/";for(var i=[],l=1;l<=r;l++)i.push(l);var u="page-item",s="page-item";return u=o<r?"page-item":"page-item disabled",s=o>1?"page-item":"page-item disabled",c.a.createElement("div",null,c.a.createElement("ul",{className:"pagination",style:{marginLeft:"40%"}},c.a.createElement("li",{className:s},c.a.createElement(P.Link,{to:n+"".concat(parseInt(o)-1),className:"page-link",id:"prev",onClick:function(){t.setActivePage(parseInt(o)-1,"prev",e.props.pageName,a)}},"Prev")),i.map(function(r){return parseInt(o)===parseInt(r)?c.a.createElement("li",{className:"page-item active",key:r,id:r},c.a.createElement(P.Link,{to:n+"".concat(r),className:"page-link",onClick:function(){t.setActivePage(r,"normal",e.props.pageName,a)}},r)):c.a.createElement("li",{className:"page-item",key:r,id:r},c.a.createElement(P.Link,{to:n+"".concat(r),className:"page-link",onClick:function(){t.setActivePage(r,"normal",e.props.pageName,a)}},r))}),c.a.createElement("li",{className:u},c.a.createElement(P.Link,{to:n+"".concat(parseInt(o)+1),className:"page-link disabled",onClick:function(){t.setActivePage(parseInt(o)+1,"next",e.props.pageName,a)}},"Next"))))}))}}])&&O(n.prototype,r),o&&O(n,o),t}();function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function N(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function T(e,t){return!t||"object"!==I(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function L(e){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function A(e,t){return(A=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var R=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),T(this,L(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&A(e,t)}(t,a["Component"]),n=t,(r=[{key:"render",value:function(){return c.a.createElement(c.a.Fragment,null,c.a.createElement(w,null,function(e){var t=e.post,n=e.isLoading;return t.map(function(e){var t=e.excerpt.rendered.split("<div>");e.excerpt.rendered=t[0]}),n?c.a.createElement("h1",null,"Loading...."):c.a.createElement(_.Container,null,c.a.createElement(_.Row,{className:"justify-content-md-center"},t.map(function(t){return c.a.createElement(_.Col,{key:t.id,md:"auto"},c.a.createElement(_.Card,{bg:"secondary",text:"white",style:{width:"18rem"}},c.a.createElement(_.Card.Header,{dangerouslySetInnerHTML:{__html:t.title.rendered}}),c.a.createElement(_.Card.Body,null,c.a.createElement(_.Card.Title,{dangerouslySetInnerHTML:{__html:t.excerpt.rendered}}),c.a.createElement(_.Card.Text,null,c.a.createElement(P.Link,{to:"/fullPost/".concat(t.id)},"Full Post"))),c.a.createElement(_.Card.Footer,{className:"text-muted"},c.a.createElement("p",null,c.a.createElement("span",{style:{color:"white"}}," ","Category:-")," ",t._embedded["wp:term"].map(function(t){return t.map(function(t){return c.a.createElement(P.Link,{to:"/category/".concat(t.id,"/1"),onClick:function(){e.setCategory(t.id)}},t.name)})}))," ")),c.a.createElement("br",null))})),c.a.createElement(C,{pageName:"Home"}))}))}}])&&N(n.prototype,r),o&&N(n,o),t}();n(9);function H(e){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function F(e,t){return!t||"object"!==H(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var D=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),F(this,M(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(t,a["Component"]),n=t,(r=[{key:"render",value:function(){var e=this;return c.a.createElement(c.a.Fragment,null,c.a.createElement(w,null,function(t){var n,r=t.post;return n=r.length>0?r.find(function(t){return t.id===parseInt(e.props.match.params.id)}):r,c.a.createElement(c.a.Fragment,null,c.a.createElement(_.Container,null,c.a.createElement(_.Row,{className:"justify-content-md"},c.a.createElement("h2",{dangerouslySetInnerHTML:{__html:n.title.rendered}}),c.a.createElement("div",{dangerouslySetInnerHTML:{__html:n.content.rendered}}))))}))}}])&&q(n.prototype,r),o&&q(n,o),t}(),J=function(){return c.a.createElement(w,null,function(e){return c.a.createElement("nav",{className:"navbar navbar-expand-sm bg-dark navbar-dark"},c.a.createElement("ul",{className:"navbar-nav"},c.a.createElement("li",{className:"nav-item"},c.a.createElement("img",{src:"https://cdn.freebiesupply.com/logos/large/2x/react-1-logo-png-transparent.png",className:"App-logo",height:"40",width:"40",alt:"logo"})),c.a.createElement("li",{className:"nav-item"},c.a.createElement(P.Link,{className:"nav-link",to:"/",onClick:function(){e.setActivePage(1,"home","Home",1)}},"Home"))))})};function z(e){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function G(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Q(e,t){return!t||"object"!==z(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Y(e){return(Y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function K(e,t){return(K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var U=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Q(this,Y(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(t,a["Component"]),n=t,(r=[{key:"render",value:function(){return c.a.createElement(c.a.Fragment,null,c.a.createElement("nav",{class:"navbar navbar-expand-sm bg-dark navbar-dark bg-faded"},c.a.createElement("ul",{className:"navbar-nav"},c.a.createElement("li",{className:"nav-item"},c.a.createElement("img",{src:"https://cdn.freebiesupply.com/logos/large/2x/react-1-logo-png-transparent.png",className:"App-logo",height:"40",width:"40",alt:"logo"})),c.a.createElement("li",{className:"nav-item"},c.a.createElement("h6",{style:{color:"rgba(255, 255, 255, 0.5)",paddingTop:"3%",paddingLeft:"1%"}},"Developed By Bhautik Gosai")))))}}])&&G(n.prototype,r),o&&G(n,o),t}();function V(e){return(V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function X(e,t){return!t||"object"!==V(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function $(e,t){return($=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var ee=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=X(this,Z(t).call(this,e))).state={category:[],isLoaded:!1},n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$(e,t)}(t,a["Component"]),n=t,(r=[{key:"render",value:function(){var e=this;return c.a.createElement(c.a.Fragment,null,c.a.createElement(w,null,function(t){var n=t.post;return n.map(function(e){var t=e.excerpt.rendered.split("<div>");e.excerpt.rendered=t[0]}),t.isLoading?c.a.createElement("h3",null,"Loading....."):c.a.createElement("div",null,c.a.createElement(_.Row,{className:"justify-content-md"},n.map(function(e){return c.a.createElement(_.Col,{key:e.id,md:"auto"},c.a.createElement(_.Card,{bg:"secondary",text:"white",style:{width:"18rem"}},c.a.createElement(_.Card.Header,{dangerouslySetInnerHTML:{__html:e.title.rendered}}),c.a.createElement(_.Card.Body,null,c.a.createElement(_.Card.Title,{dangerouslySetInnerHTML:{__html:e.excerpt.rendered}}),c.a.createElement(_.Card.Text,null,c.a.createElement(P.Link,{to:"/fullPost/".concat(e.id)},"Full Post"))),c.a.createElement(_.Card.Footer,{className:"text-muted"},c.a.createElement("p",null,c.a.createElement("span",{style:{color:"white"}}," ","Category:-"),e._embedded["wp:term"][0].map(function(e){return c.a.createElement(P.Link,{to:"/category/".concat(e.id,"/1"),onClick:function(){t.setCategory(e.id)}},e.name)}))," ")),c.a.createElement("br",null))})),c.a.createElement(C,{category:e.state.category,pageName:"category"}))}))}}])&&W(n.prototype,r),o&&W(n,o),t}(),te=function(){return c.a.createElement(c.a.Fragment,null,c.a.createElement(J,null),c.a.createElement("div",{style:{minHeight:"438px"}},c.a.createElement(P.Route,{exact:!0,path:"/:pageNumber",component:R}),c.a.createElement(P.Route,{exact:!0,path:"/fullPost/:id",component:D}),c.a.createElement(P.Route,{exact:!0,path:"/category/:categoryId/:pageId",component:ee}),c.a.createElement(P.Route,{exact:!0,path:"/",component:R})),c.a.createElement(U,null))},ne=function(e){var t=e.body,n=e.initialState;return'\n    <!DOCTYPE html>\n    <html>\n        <head> \n        <base href="/"/>\n        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">\n  \n  \x3c!-- jQuery library --\x3e\n  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"><\/script>\n  \n  \x3c!-- Popper JS --\x3e\n  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"><\/script>\n  \n  \x3c!-- Latest compiled JavaScript --\x3e\n  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"><\/script>\n  <link rel="stylesheet" type="text/css" href="styles.css" />\n        </head>\n        <body>\n            <div id="root">'.concat(t,"</div>\n            <script>window.__INITIAL_DATA__ = ").concat(u()(n),'<\/script>\n            <script src="bundle.js"><\/script>\n        </body>\n    </html>\n    ')},re=o()();re.use(o.a.static("public"));var oe=process.env.PORT||3e3;re.get("/fullPost/:id",function(e,t){(function(){try{return p.a.get("https://bhautikng143.000webhostapp.com/wp-json/wp/v2/posts/"+e.params.id)}catch(e){console.log(e)}})().then(function(n){var r={postArray:n.data,totalPage:n.headers["x-wp-totalpages"],activePage:e.params.id,categoryId:1},o=Object(i.renderToString)(c.a.createElement(P.StaticRouter,{location:e.url,context:{}},c.a.createElement(E,{posts:r},c.a.createElement(te,null))));t.send(ne({body:o,initialState:r}))}).catch(function(e){console.log(e)})}),re.get("/category/:categoryId/:pageId",function(e,t){console.log(e.params.categoryId),console.log(e.params.pageId);(function(){try{return p.a.get("https://bhautikng143.000webhostapp.com/wp-json/wp/v2/posts?_embed&categories="+e.params.categoryId+"&per_page=10&page="+e.params.pageId+"&order=desc&orderby=date")}catch(e){console.log(e)}})().then(function(n){var r={postArray:n.data,totalPage:n.headers["x-wp-totalpages"],activePage:e.params.pageId,categoryId:e.params.categoryId},o=Object(i.renderToString)(c.a.createElement(P.StaticRouter,{location:e.url,context:{}},c.a.createElement(E,{posts:r},c.a.createElement(te,null))));t.send(ne({body:o,initialState:r}))}).catch(function(e){console.log(e)})}),re.get("/:pageNumber",function(e,t){(function(){try{return p.a.get("https://bhautikng143.000webhostapp.com/wp-json/wp/v2/posts/?_embed&per_page=10&page="+e.params.pageNumber+"&order=desc&orderby=date")}catch(e){console.log(e)}})().then(function(n){var r={postArray:n.data,totalPage:n.headers["x-wp-totalpages"],activePage:e.params.pageNumber,categoryId:1},o=Object(i.renderToString)(c.a.createElement(P.StaticRouter,{location:e.url,context:{}},c.a.createElement(E,{posts:r},c.a.createElement(te,null))));t.send(ne({body:o,initialState:r}))}).catch(function(e){console.log(e)})}),re.get("/",function(e,t){(function(){try{return p.a.get("https://bhautikng143.000webhostapp.com/wp-json/wp/v2/posts/?_embed&per_page=10&page=1&order=desc&orderby=date")}catch(e){console.log(e)}})().then(function(n){var r={postArray:n.data,totalPage:n.headers["x-wp-totalpages"],activePage:1,categoryId:1},o=Object(i.renderToString)(c.a.createElement(P.StaticRouter,{location:e.url,context:{}},c.a.createElement(E,{posts:r},c.a.createElement(te,null))));t.send(ne({body:o,initialState:r}))}).catch(function(e){console.log(e)})}),re.listen(oe,function(){console.log("Server listening on port ".concat(oe))})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,